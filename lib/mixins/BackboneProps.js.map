{"version":3,"sources":["../../src/mixins/BackboneProps.es6"],"names":[],"mappings":";;;;;;;;;;;;;;;;kBAGe,kBAAQ,aAAa,CAAC,eAAe,EAAE;;;;;;;;;AAQpD,oBAAkB,gCAAG;AACnB,QAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAA;GAC5B;AAED,2BAAyB,qCAAC,SAAS,EAAE;AACnC,QAAI,CAAC,UAAU,CAAC,SAAS,CAAC,CAAA;GAC3B;AAED,YAAU,sBAAC,KAAK,EAAE;;;AAChB,QAAI,CAAC,IAAI,GAAG,EAAE,CAAA;;AAEd,KAAC,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,UAAC,KAAK,EAAE,IAAI,EAAK;AACxC,UAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,CAAA;;AAEtB,UAAG,IAAI,IAAI,IAAI,IAAI,EAAE,IAAI,YAAY,QAAQ,CAAC,KAAK,IAAI,IAAI,YAAY,QAAQ,CAAC,UAAU,CAAA,AAAC,EAAE;;AAE3F,aAAK,CAAC,IAAI,CAAC,GAAG,IAAI,KAAK,CAAC,IAAI,CAAC,CAAA;OAC9B;;;AAAA,AAGD,YAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAA;KAC5B,CAAC,CAAA;GACH;;;AAGD,mBAAiB,+BAAG;;;AAClB,KAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,KAAK,EAAK;AAC3B,WAAK,CAAC,EAAE,CAAC,KAAK,EAAE,OAAK,WAAW,CAAC,IAAI,SAAO,IAAI,CAAC,SAAO,CAAA;KACzD,CAAC,CAAA;GACH;;;AAGD,sBAAoB,kCAAG;;;AACrB,KAAC,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,UAAC,KAAK,EAAK;AAC3B,WAAK,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,SAAO,CAAA;KAC5B,CAAC,CAAA;GACH;CAEF,CAAC","file":"BackboneProps.js","sourcesContent":["import React from 'react'\nimport Revelry from '../revelry'\n\nexport default Revelry.registerMixin('BackboneProps', {\n  // Component should contain a map of prop names to Backbone classes, like:\n  //\n  // backboneMap = {\n  //   users: User.Collection,\n  // }\n\n  // Set up our Backbone instance objects.\n  componentWillMount() {\n    this.backbonify(this.props)\n  },\n\n  componentWillReceiveProps(nextProps) {\n    this.backbonify(nextProps)\n  },\n\n  backbonify(props) {\n    this.__bb = []\n\n    _.each(this.backboneMap, (klass, name) => {\n      let data = props[name]\n\n      if(data != null && !(data instanceof Backbone.Model || data instanceof Backbone.Collection)) {\n        // Rewrite the prop as the correct Backbone model or collection.\n        props[name] = new klass(data)\n      }\n\n      // Save a reference so we can wire up events.\n      this.__bb.push(props[name])\n    })\n  },\n\n  // Whenever there may be a change in the Backbone data, trigger a reconcile.\n  componentDidMount() {\n    _.each(this.__bb, (model) => {\n      model.on('all', this.forceUpdate.bind(this, null), this)\n    })\n  },\n\n  // Clean up any dangling references when the component is destroyed.\n  componentWillUnmount() {\n    _.each(this.__bb, (model) => {\n      model.off(null, null, this)\n    })\n  },\n\n})\n"]}