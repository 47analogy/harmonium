{"version":3,"sources":["../../src/mixins/core.es6"],"names":[],"mappings":";;;;;;;;;;;;kBAEe;;AAEb,eAAa,EAAE,uBAAS,IAAI,EAAE,KAAK,EAAE;AACnC,QAAI,GAAG,GAAG,EAAE,CAAA;AACZ,OAAG,CAAC,IAAI,CAAC,GAAG,IAAI,CAAA;AAChB,SAAI,IAAI,IAAI,IAAI,KAAK,EAAE;AACrB,SAAG,CAAI,IAAI,UAAK,IAAI,CAAG,GAAG,KAAK,CAAC,IAAI,CAAC,CAAA;KACtC;AACD,WAAO,GAAG,CAAA;GACX;;AAED,SAAO,EAAE,iBAAS,IAAI,EAAE,KAAK,EAAE;AAC7B,WAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAA;GACtD;;AAED,iBAAe,EAAE,2BAAmB;sCAAP,KAAK;AAAL,WAAK;;;AAChC,WAAO,qBAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;GACjC;;AAED,UAAQ,EAAE,kBAAS,KAAK,EAAE;AACxB,QAAI,UAAU,GAAG,EAAE,CAAA;AACnB,SAAI,IAAI,IAAI,IAAI,KAAK,EAAE;AACrB,UAAG,KAAK,CAAC,IAAI,CAAC,EAAE;AACd,kBAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;OACtB;KACF;AACD,WAAO,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAA;GAC5B;;AAED,IAAE,EAAE,cAAW;AACb,QAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAA;GACrC;;AAED,gCAA8B,EAAE,wCAAS,SAAS,EAAE;AAClD,QAAI,GAAG,GAAG,EAAE,CAAA;AACZ,aAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,UAAC,IAAI,EAAK;AACrC,SAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,GAAG,IAAI,CAAA;KACxB,CAAC,CAAA;AACF,WAAO,GAAG,CAAA;GACX;;AAED,UAAQ,EAAE,kBAAS,KAAK,EAAE;AACxB,QAAI,GAAG,GAAG,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,EAAE,CAAC,CAAA;AACzE,yBAAE,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,CAAA;AACpB,WAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA;GAC1B;;AAED,aAAW,EAAE,qBAAS,EAAE,EAAE;AACxB,WAAO,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAA;GACnD;;AAED,uBAAqB,EAAE,iCAAW;AAChC,WAAO,CAAC,IAAI,CAAC,4GAA4G,CAAC,CAAA;AAC1H,QAAI,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAA;AAClC,WAAO,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,QAAQ,CAAA;GACjE;;CAEF","file":"core.js","sourcesContent":["import _ from 'underscore'\n\nexport default {\n\n  suitSetObject: function(base, flags) {\n    let obj = {}\n    obj[base] = true\n    for(let name in flags) {\n      obj[`${base}--${name}`] = flags[name]\n    }\n    return obj\n  },\n\n  suitSet: function(base, flags) {\n    return this.classSet(this.suitSetObject(base, flags))\n  },\n\n  getPropsWithout: function(...names) {\n    return _.omit(this.props, names)\n  },\n\n  classSet: function(flags) {\n    let classNames = []\n    for(let name in flags) {\n      if(flags[name]) {\n        classNames.push(name)\n      }\n    }\n    return classNames.join(' ')\n  },\n\n  cx: function() {\n    this.classSet.apply(this, arguments)\n  },\n\n  getClassSetObjectFromClassName: function(className) {\n    let obj = {}\n    className.split(' ').forEach((name) => {\n      obj[name.trim()] = true\n    })\n    return obj\n  },\n\n  classAdd: function(flags) {\n    let obj = this.getClassSetObjectFromClassName(this.props.className || '')\n    _.extend(obj, flags)\n    return this.classSet(obj)\n  },\n\n  mapChildren: function(fn) {\n    return React.Children.map(this.props.children, fn)\n  },\n\n  getNormalizedChildren: function() {\n    console.warn('Core mixin method `getNormalizedChildren` is deprecated. Please use `mapChildren` or `React.Children.map`.')\n    let children = this.props.children\n    return children && children.length === 0 ? [children] : children\n  },\n\n}\n"]}