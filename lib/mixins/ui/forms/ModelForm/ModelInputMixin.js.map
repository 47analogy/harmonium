{"version":3,"sources":["../../../../../src/mixins/ui/forms/ModelForm/ModelInputMixin.es6"],"names":[],"mappings":";;AAAA,GAAG,CAAC,aAAa,CAAC,iBAAiB,EAAE;AAEnC,mBAAiB,+BAAG;AAClB,QAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,YAAY,EAAE,CAAC,CAAA;GAC5D;AAED,cAAY,0BAAG;AACb,WAAO,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,IAAI,CAAC,KAAK,EAAE,CAAA;GAC/C;AAED,OAAK,mBAAG;AACN,WAAO,IAAI,CAAC,KAAK,CAAC,KAAK,IAChB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,IACpB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAA;GAC9C;AAED,OAAK,mBAAG;AACN,WAAO,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,WAAW,CAAC,IAAI,CAAC,CAAA;GAC5D;AAED,MAAI,kBAAG;AACL,WAAO,IAAI,CAAC,KAAK,CAAC,IAAI,KAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,EAAE,CAAA,SAAI,IAAI,CAAC,KAAK,CAAC,KAAK,MAAG,CAAA;GACxF;AAED,YAAU,wBAAG;AACX,WAAO,IAAI,CAAC,KAAK,CAAC,IAAI,KAAK,UAAU,CAAA;GACtC;AAED,eAAa,yBAAC,CAAC,EAAE;AACf,QAAM,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,GAAG,SAAS,GAAG,OAAO,CAAC,CAAA;;AAE/D,QAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;;AAE7C,QAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;AACtB,UAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAA;KACvB;GACF;AAED,QAAM,kBAAC,EAAE,EAAE;AACT,QAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,cAAY,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAG,CAAA;;AAEjF,QAAG,SAAS,EAAE;AACZ,UAAM,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAA;;AAEhD,UAAG,KAAK,EAAE;AACR,YAAM,MAAM,GAAG,EAAE,CAAA;;AAEjB,cAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,CAAA;;AAElC,YAAM,QAAQ,GAAG;AACf,sBAAY,EAAE,EAAC,MAAM,EAAN,MAAM,EAAC;SACvB,CAAA;;AAED,YAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAA;OAClE;KACF;GACF;CACF,CAAC,CAAA","file":"ModelInputMixin.js","sourcesContent":["Rev.registerMixin('ModelInputMixin', {\n\n  componentDidMount() {\n    this.props.model.set(this.props.field, this.defaultValue())\n  },\n\n  defaultValue() {\n    return this.props.defaultValue || this.value()\n  },\n\n  value() {\n    return this.props.model &&\n           this.props.model.get &&\n           this.props.model.get(this.props.field)\n  },\n\n  klass() {\n    return _.str.underscored(this.props.model.constructor.name)\n  },\n\n  name() {\n    return this.props.name || `${this.props.baseName || this.klass()}[${this.props.field}]`\n  },\n\n  isCheckbox() {\n    return this.props.type === 'checkbox'\n  },\n\n  onFieldChange(e) {\n    const value = e.target[this.isCheckbox() ? 'checked' : 'value']\n\n    this.props.model.set(this.props.field, value)\n\n    if(this.props.onChange) {\n      this.props.onChange(e)\n    }\n  },\n\n  onBlur(_e) {\n    const validator = this.props.model[`validate${_.str.classify(this.props.field)}`]\n\n    if(validator) {\n      const error = validator.bind(this.props.model)()\n\n      if(error) {\n        const errors = {}\n\n        errors[this.props.field] = [error]\n\n        const response = {\n          responseJSON: {errors},\n        }\n\n        this.props.model.trigger('error', this.props.model, response, {})\n      }\n    }\n  },\n})\n"]}