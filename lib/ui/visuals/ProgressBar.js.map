{"version":3,"sources":["../../../src/ui/visuals/ProgressBar.es6"],"names":[],"mappings":";;;;;;;;;;;;AAAA,GAAG,CAAC,iBAAiB,CAAC,aAAa;YAAQ,WAAW;;WAAX,WAAW;0BAAX,WAAW;;kEAAX,WAAW;;;eAAX,WAAW;;6BAkD3C;AACP,aAAO;;qBAAS,IAAI,CAAC,KAAK,IAAE,SAAS,EAAE,IAAI,CAAC,SAAS,AAAC;QACpD,8BAAM,SAAS,EAAE,IAAI,CAAC,aAAa,AAAC,EAAC,KAAK,EAAE,IAAI,CAAC,SAAS,AAAC,GAAG;OAC1D,CAAA;KACP;;;wBA9Be;AACd,aAAO,IAAI,CAAC,QAAQ,CAAC;AACnB,wBAAgB,EAAE,IAAI;AACtB,kBAAU,EAAE,IAAI;AAChB,iBAAS,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO;AAC7B,mBAAW,EAAE,IAAI,CAAC,KAAK,CAAC,SAAS;AACjC,eAAO,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;OAC1B,CAAC,CAAA;KACH;;;wBAEmB;AAClB,aAAO,IAAI,CAAC,QAAQ,CAAC;AACnB,6BAAqB,EAAE,IAAI;AAC3B,eAAO,EAAE,IAAI;OACd,CAAC,CAAA;KACH;;;wBAEe;mBACoB,IAAI,CAAC,KAAK;UAAvC,KAAK,UAAL,KAAK;UAAE,QAAQ,UAAR,QAAQ;UAAE,QAAQ,UAAR,QAAQ;;AAC9B,aAAO,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,KAAK,GAAG,QAAQ,CAAA,IAAK,QAAQ,GAAG,QAAQ,CAAA,AAAC,CAAC,CAAA;KAC/D;;;wBAEe;AACd,aAAO,EAAC,KAAK,EAAK,IAAI,CAAC,SAAS,GAAC,GAAG,MAAG,EAAC,CAAA;KACzC;;;wBA9CsB;AACrB,aAAO;AACL,aAAK,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AAC7B,gBAAQ,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AAChC,gBAAQ,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AAChC,eAAO,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI;AAC7B,iBAAS,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI;AAC/B,aAAK,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI;OAC5B,CAAA;KACF;;;wBAEyB;AACxB,aAAO;AACL,aAAK,EAAE,CAAC;AACR,gBAAQ,EAAE,CAAC;AACX,gBAAQ,EAAE,CAAC;AACX,eAAO,EAAE,KAAK;AACd,iBAAS,EAAE,KAAK;AAChB,aAAK,EAAE,KAAK;OACb,CAAA;KACF;;;SAtBwC,WAAW;GAAS,KAAK,CAAC,SAAS,EAwD5E,CAAA","file":"ProgressBar.js","sourcesContent":["Rev.registerComponent('ProgressBar', class ProgressBar extends React.Component {\n\n  static get propTypes() {\n    return {\n      value: React.PropTypes.number,\n      minValue: React.PropTypes.number,\n      maxValue: React.PropTypes.number,\n      success: React.PropTypes.bool,\n      secondary: React.PropTypes.bool,\n      alert: React.PropTypes.bool,\n    }\n  }\n\n  static get defaultProps() {\n    return {\n      value: 0,\n      minValue: 0,\n      maxValue: 1,\n      success: false,\n      secondary: false,\n      alert: false,\n    }\n  }\n\n  get className() {\n    return this.classAdd({\n      'RevProgressBar': true,\n      'progress': true,\n      'success': this.props.success,\n      'secondary': this.props.secondary,\n      'alert': this.props.alert,\n    })\n  }\n\n  get fillClassName() {\n    return this.classSet({\n      'RevProgressBar-fill': true,\n      'meter': true,\n    })\n  }\n\n  get fillRatio() {\n    let {value, minValue, maxValue} = this.props\n    return Math.min(1, (value - minValue) / (maxValue - minValue))\n  }\n\n  get fillStyle() {\n    return {width: `${this.fillRatio*100}%`}\n  }\n\n  render() {\n    return <div {...this.props} className={this.className}>\n      <span className={this.fillClassName} style={this.fillStyle} />\n    </div>\n  }\n\n})\n"]}