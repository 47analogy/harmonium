{"version":3,"sources":["../../../src/ui/formatting/NumberFormatter.es6"],"names":[],"mappings":";;;;;;;;;;AAAA,GAAG,CAAC,iBAAiB,CAAC,iBAAiB;YAAQ,eAAe;;WAAf,eAAe;0BAAf,eAAe;;kEAAf,eAAe;;;eAAf,eAAe;;6BA2BnD;AACP,aAAO;;;QAAO,IAAI,CAAC,IAAI;OAAQ,CAAA;KAChC;;;wBAViB;AAChB,aAAO,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAA;KAChD;;;wBAEU;AACT,aAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,cAAc,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,CAAA;KAC7E;;;wBAvBsB;AACrB,aAAO;AACL,aAAK,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,UAAU;AACxC,eAAO,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AAC/B,qBAAa,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;AAC5D,aAAK,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;AAChE,gBAAQ,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AAChC,uBAAe,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;AAClE,mBAAW,EAAE,KAAK,CAAC,SAAS,CAAC,IAAI;AACjC,4BAAoB,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AAC5C,6BAAqB,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AAC7C,6BAAqB,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AAC7C,gCAAwB,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;AAChD,gCAAwB,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM;OACjD,CAAA;KACF;;;SAjB4C,eAAe;GAAS,KAAK,CAAC,SAAS,EA8BpF,CAAA","file":"NumberFormatter.js","sourcesContent":["Rev.registerComponent('NumberFormatter', class NumberFormatter extends React.Component {\n\n  static get propTypes() {\n    return {\n      value: React.PropTypes.number.isRequired,\n      locales: React.PropTypes.string,\n      localeMatcher: React.PropTypes.oneOf(['lookup', 'best fit']),\n      style: React.PropTypes.oneOf(['decimal', 'currency', 'percent']),\n      currency: React.PropTypes.string,\n      currencyDisplay: React.PropTypes.oneOf(['symbol', 'code', 'name']),\n      useGrouping: React.PropTypes.bool,\n      minimumIntegerDigits: React.PropTypes.number,\n      minimumFractionDigits: React.PropTypes.number,\n      maximumFractionDigits: React.PropTypes.number,\n      minimumSignificantDigits: React.PropTypes.number,\n      maximumSignificantDigits: React.PropTypes.number,\n    }\n  }\n\n  get optionProps() {\n    return _.omit(this.props, ['locales', 'value'])\n  }\n\n  get text() {\n    return this.props.value.toLocaleString(this.props.locales, this.optionProps)\n  }\n\n  render() {\n    return <span>{this.text}</span>\n  }\n})\n"]}